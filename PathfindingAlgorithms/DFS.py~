import sets
import sys

def parse_file():
    if len(sys.argv) < 2:
        print "Error: Not enough inputs"
        sys.exit()
    result_matrix = []
    f = open(sys.argv[1],'r')
    for line in f.readlines():
        if not(line[0] == '#'):
            line = line.split()
            result_matrix.append(map(int,line))
    f.close()
    return result_matrix


def rebuild(node, origins):
    result = [node]
    current = node
    while(origins[current]!=None):
        current = origins[current]
        result.append(current)
    result.reverse()
    return result

def dfs(matrix,root,finish):
    upcoming_nodes = []
    marked = sets.Set()
    origins = dict()
    visited_nodes = []

    upcoming_nodes.append(root)
    marked.add(root)
    visited_nodes.append(root)
    origins[0]=None

    while(not(upcoming_nodes ==[])):
        node = upcoming_nodes.pop()
        if (node == finish):
            return rebuild(node,origins),visited_nodes
        node_children = [ index  for index, element in enumerate(matrix[node]) if element!=0 ]
        for child in node_children:           
            if(child not in marked):
                visited_nodes.append(child)
                origins[child] = node
                marked.add(child)
                upcoming_nodes.append(child)
    return None    
def main():
    incidence_matrix = parse_file()
    path,searched = dfs(incidence_matrix,0,len(incidence_matrix)-1)

    output_path = open("path.txt",'w')
    output_searched = open("searched.txt",'w')
    
    for node in path:
        output_path.write(str(node)+'\n')
    for node in searched:
        output_searched.write(str(node)+'\n')

main()
