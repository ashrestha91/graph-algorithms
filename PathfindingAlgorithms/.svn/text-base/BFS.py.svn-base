import Queue
import sets
import sys

def parse_file():
    result_matrix = []
    f = open(sys.argv[1],'r')
    for line in f.readlines():
        if not(line[0] == '#'):
            line = line.split()
            result_matrix.append(map(int,line))
    f.close()
    return result_matrix

def bfs(matrix,root,finish):
    #initialize variables
    upcoming_nodes = Queue.Queue() #nodes to process
    marked = sets.Set() #nodes that have been added to the queue
    origins = dict() #predecessors, tracked for rebuilding path
    visited_nodes = [] #nodes we've visted, in order

    #base case
    upcoming_nodes.put(root)
    marked.add(root)
    origins[0]=None

    #iterate
    while(not(upcoming_nodes.empty())):
        """
        Put children onto the upcoming_nodes queue in numerical order
        If they're the final node, rebuild the path and return it
        Otherwise, get that node's children that aren't already queued, and put them on the queue
        """
        node = upcoming_nodes.get()
        if (node == finish):
            return rebuild(node,origins),visited_nodes
        node_children = [ index  for index, element in enumerate(matrix[node]) if element!=0 ]
        for child in node_children:           
            if(child not in marked):                
                origins[child] = node #node is the predecessor to child, for rebuilding path
                marked.add(child) #mark nodes as queue'd up
                visited_nodes.append(node) #keep track of which nodes we visited in order
                upcoming_nodes.put(child) #push children on queue
    return None

#rebuild path from dict of predecessors
def rebuild(node, origins):
    result = [node]
    current = node
    while(origins[current]!=None):
        current = origins[current]
        result.append(current)
    result.reverse()
    return result
    
def main():
    #parse file
    if len(sys.argv) < 2:
        print "Error: Not enough inputs"
        sys.exit()
    incidence_matrix = parse_file()

    #run algorithm
    path,searched = bfs(incidence_matrix,0,len(incidence_matrix)-1)

    #output
    output_path = open("path.txt",'w')
    output_searched = open("searched.txt",'w')
    
    for node in path:
        output_path.write(str(node)+'\n')
    for node in searched:
        output_searched.write(str(node)+'\n')

main()
